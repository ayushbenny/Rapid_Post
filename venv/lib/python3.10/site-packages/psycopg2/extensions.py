"""psycopg extensions to the DBAPI-2.0

This module holds all the extensions to the DBAPI-2.0 provided by psycopg.

- `connection` -- the new-type inheritable connection class
- `cursor` -- the new-type inheritable cursor class
- `lobject` -- the new-type inheritable large object class
- `adapt()` -- exposes the PEP-246_ compatible adapting mechanism used
  by psycopg to adapt Python types to PostgreSQL ones

.. _PEP-246: https://www.python.org/dev/peps/pep-0246/
"""
# psycopg/extensions.py - DBAPI-2.0 extensions specific to psycopg
#
# Copyright (C) 2003-2019 Federico Di Gregorio  <fog@debian.org>
# Copyright (C) 2020-2021 The Psycopg Team
#
# psycopg2 is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# In addition, as a special exception, the copyright holders give
# permission to link this program with the OpenSSL library (or with
# modified versions of OpenSSL that use the same license as OpenSSL),
# and distribute linked combinations including the two.
#
# You must obey the GNU Lesser General Public License in all respects for
# all of the code used other than OpenSSL.
#
# psycopg2 is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
# License for more details.
import re as _re

from psycopg2._psycopg import adapt
from psycopg2._psycopg import adapters
from psycopg2._psycopg import AsIs
from psycopg2._psycopg import Binary
from psycopg2._psycopg import binary_types
from psycopg2._psycopg import BINARYARRAY
from psycopg2._psycopg import BOOLEAN
from psycopg2._psycopg import Boolean
from psycopg2._psycopg import BOOLEANARRAY
from psycopg2._psycopg import BYTES
from psycopg2._psycopg import BYTESARRAY
from psycopg2._psycopg import Column
from psycopg2._psycopg import connection
from psycopg2._psycopg import ConnectionInfo
from psycopg2._psycopg import cursor
from psycopg2._psycopg import DATE
from psycopg2._psycopg import DATEARRAY
from psycopg2._psycopg import DateFromPy
from psycopg2._psycopg import DATETIMEARRAY
from psycopg2._psycopg import DECIMAL
from psycopg2._psycopg import DECIMALARRAY
from psycopg2._psycopg import Diagnostics
from psycopg2._psycopg import encodings
from psycopg2._psycopg import encrypt_password
from psycopg2._psycopg import FLOAT
from psycopg2._psycopg import Float
from psycopg2._psycopg import FLOATARRAY
from psycopg2._psycopg import get_wait_callback
from psycopg2._psycopg import Int
from psycopg2._psycopg import INTEGER
from psycopg2._psycopg import INTEGERARRAY
from psycopg2._psycopg import INTERVAL
from psycopg2._psycopg import INTERVALARRAY
from psycopg2._psycopg import IntervalFromPy
from psycopg2._psycopg import ISQLQuote
from psycopg2._psycopg import libpq_version
from psycopg2._psycopg import lobject
from psycopg2._psycopg import LONGINTEGER
from psycopg2._psycopg import LONGINTEGERARRAY
from psycopg2._psycopg import new_array_type
from psycopg2._psycopg import new_type
from psycopg2._psycopg import Notify
from psycopg2._psycopg import parse_dsn
from psycopg2._psycopg import PYDATE
from psycopg2._psycopg import PYDATEARRAY
from psycopg2._psycopg import PYDATETIME
from psycopg2._psycopg import PYDATETIMEARRAY
from psycopg2._psycopg import PYDATETIMETZ
from psycopg2._psycopg import PYDATETIMETZARRAY
from psycopg2._psycopg import PYINTERVAL
from psycopg2._psycopg import PYINTERVALARRAY
from psycopg2._psycopg import PYTIME
from psycopg2._psycopg import PYTIMEARRAY
from psycopg2._psycopg import QueryCanceledError
from psycopg2._psycopg import quote_ident
from psycopg2._psycopg import QuotedString
from psycopg2._psycopg import register_type
from psycopg2._psycopg import ROWIDARRAY
from psycopg2._psycopg import set_wait_callback
from psycopg2._psycopg import string_types
from psycopg2._psycopg import STRINGARRAY
from psycopg2._psycopg import TIME
from psycopg2._psycopg import TIMEARRAY
from psycopg2._psycopg import TimeFromPy
from psycopg2._psycopg import TimestampFromPy
from psycopg2._psycopg import TransactionRollbackError
from psycopg2._psycopg import UNICODE
from psycopg2._psycopg import UNICODEARRAY
from psycopg2._psycopg import Xid


"""Isolation level values."""
ISOLATION_LEVEL_AUTOCOMMIT = 0
ISOLATION_LEVEL_READ_UNCOMMITTED = 4
ISOLATION_LEVEL_READ_COMMITTED = 1
ISOLATION_LEVEL_REPEATABLE_READ = 2
ISOLATION_LEVEL_SERIALIZABLE = 3
ISOLATION_LEVEL_DEFAULT = None


"""psycopg connection status values."""
STATUS_SETUP = 0
STATUS_READY = 1
STATUS_BEGIN = 2
STATUS_SYNC = 3  # currently unused
STATUS_ASYNC = 4  # currently unused
STATUS_PREPARED = 5

# This is a useful mnemonic to check if the connection is in a transaction
STATUS_IN_TRANSACTION = STATUS_BEGIN


"""psycopg asynchronous connection polling values"""
POLL_OK = 0
POLL_READ = 1
POLL_WRITE = 2
POLL_ERROR = 3


"""Backend transaction status values."""
TRANSACTION_STATUS_IDLE = 0
TRANSACTION_STATUS_ACTIVE = 1
TRANSACTION_STATUS_INTRANS = 2
TRANSACTION_STATUS_INERROR = 3
TRANSACTION_STATUS_UNKNOWN = 4


def register_adapter(typ, callable):
    """Register 'callable' as an ISQLQuote adapter for type 'typ'."""
    adapters[(typ, ISQLQuote)] = callable


# The SQL_IN class is the official adapter for tuples starting from 2.0.6.
class SQL_IN:
    """Adapt any iterable to an SQL quotable object."""

    def __init__(self, seq):
        self._seq = seq
        self._conn = None

    def prepare(self, conn):
        self._conn = conn

    def getquoted(self):
        # this is the important line: note how every object in the
        # list is adapted and then how getquoted() is called on it
        pobjs = [adapt(o) for o in self._seq]
        if self._conn is not None:
            for obj in pobjs:
                if hasattr(obj, "prepare"):
                    obj.prepare(self._conn)
        qobjs = [o.getquoted() for o in pobjs]
        return b"(" + b", ".join(qobjs) + b")"

    def __str__(self):
        return str(self.getquoted())


class NoneAdapter:
    """Adapt None to NULL.

    This adapter is not used normally as a fast path in mogrify uses NULL,
    but it makes easier to adapt composite types.
    """

    def __init__(self, obj):
        pass

    def getquoted(self, _null=b"NULL"):
        return _null


def make_dsn(dsn=None, **kwargs):
    """Convert a set of keywords into a connection strings."""
    if dsn is None and not kwargs:
        return ""

    # If no kwarg is specified don't mung the dsn, but verify it
    if not kwargs:
        parse_dsn(dsn)
        return dsn

    # Override the dsn with the parameters
    if "database" in kwargs:
        if "dbname" in kwargs:
            raise TypeError(
                "you can't specify both 'database' and 'dbname' arguments",
            )
        kwargs["dbname"] = kwargs.pop("database")

    # Drop the None arguments
    kwargs = {k: v for (k, v) in kwargs.items() if v is not None}

    if dsn is not None:
        tmp = parse_dsn(dsn)
        tmp.update(kwargs)
        kwargs = tmp

    dsn = " ".join([f"{k}={_param_escape(str(v))}" for (k, v) in kwargs.items()])

    # verify that the returned dsn is valid
    parse_dsn(dsn)

    return dsn


def _param_escape(
    s,
    re_escape=_re.compile(r"([\\'])"),
    re_space=_re.compile(r"\s"),
):
    """
    Apply the escaping rule required by PQconnectdb
    """
    if not s:
        return "''"

    s = re_escape.sub(r"\\\1", s)
    if re_space.search(s):
        s = "'" + s + "'"

    return s


# Create default json typecasters for PostgreSQL 9.2 oids
from psycopg2._json import register_default_json, register_default_jsonb  # noqa

try:
    JSON, JSONARRAY = register_default_json()
    JSONB, JSONBARRAY = register_default_jsonb()
except ImportError:
    pass

del register_default_json, register_default_jsonb


# Create default Range typecasters
from psycopg2._range import Range  # noqa

del Range


# Add the "cleaned" version of the encodings to the key.
# When the encoding is set its name is cleaned up from - and _ and turned
# uppercase, so an encoding not respecting these rules wouldn't be found in the
# encodings keys and would raise an exception with the unicode typecaster
for k, v in list(encodings.items()):
    k = k.replace("_", "").replace("-", "").upper()
    encodings[k] = v

del k, v
